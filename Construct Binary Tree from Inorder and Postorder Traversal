/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int , int> m;
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for(int i = 0 ; i < inorder.size() ; i++)
            m[inorder[i]] = i; 
        int ind = postorder.size() - 1;
        return recurr(inorder , postorder , 0 , inorder.size() - 1 , ind);
    }
    
    TreeNode* recurr(vector<int>& inorder, vector<int>& postorder, int l, int r, int &ind){
        if(l > r)
            return NULL;
        
        int val = postorder[ind];
        TreeNode* root = new TreeNode(val);
        ind--;
        
        if(l == r)
            return root;
        int p = m[val];
        
        
        root->right = recurr(inorder, postorder, p + 1 , r, ind);
        root->left = recurr(inorder, postorder, l , p - 1, ind);
        return root;
    }
    

};
