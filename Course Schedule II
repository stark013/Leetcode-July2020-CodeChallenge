class Solution {
public:
    void dfs(int x,vector<int> graph[],vector<int> &visited,vector<int> &answer , bool &poss)
    {
        visited[x] = 1;
        for(int c : graph[x]){
            if(visited[c]==1){poss=false;return;}
            if(visited[c]==0)
                dfs(c,graph,visited,answer,poss);
        }
        visited[x] = 2;
        answer.push_back(x);
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int m = prerequisites.size();
        int n = numCourses;
        if(n==0) return vector<int>();
        
        // Build the graph
        vector<int> graph[n];
        for(int i = 0; i < prerequisites.size();i++)
        {
            graph[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }

        vector<int> answer;
        bool poss = true;
        vector<int> visited(n,0);
        
        for(int i = 0; i <n;i++ )
        {
            if(visited[i]==0)
                dfs(i,graph,visited,answer,poss);
        }
        
        if(poss==false)
            return vector<int> ();
        else
            return answer;
    }
};
