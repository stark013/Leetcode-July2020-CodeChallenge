/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int ans = 1;

	if(root == NULL)
		return 0;

	queue< pair<TreeNode* , int > > q;
	
	
	q.push( {root , 1} );
	int count;

	while(!q.empty()){
		pair<TreeNode* ,int > curr;

		count = q.size();

		if(count == 1){
            q.push({q.front().first, 1});
            q.pop();
         }
		
		while(count--){
			curr = q.front();
			//if(curr.first != NULL) cout << curr.first->data << " ";
			q.pop();

			if(curr.first->left != NULL)
				q.push( {curr.first->left , 2 * curr.second } );
			if(curr.first->right != NULL)
				q.push( {curr.first->right , 2 * curr.second + 1} );
		}

		//cout << q.front().second << " " << q.back().second;
	    if(q.size() > 1)
		ans = max(ans , q.back().second - q.front().second + 1);
		
		
	
	}
	return ans;
        
    }
};
